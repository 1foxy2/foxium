plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.161'
    id 'net.caffeinemc.mixin-config-plugin' version '1.0-SNAPSHOT'
}

apply plugin: 'net.caffeinemc.mixin-config-plugin'

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = "foxium"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        arguments '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }

    main.resources {
        srcDir 'src/generated/resources'
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    allprojects {
        repositories {
            maven { url 'https://jitpack.io' }
        }
    }
    maven {
        url "https://maven.su5ed.dev/releases"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly 'net.caffeinemc:mixin-config-plugin:1.0-SNAPSHOT'

    compileOnly "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.102.0+2.0.12+1.21.1"
}

createMixinConfig {
    inputFiles = file(compileJava.getDestinationDirectory())
    includeFiles = file("src/main/java/me/jellysquid/mods/lithium")
    outputDirectory = file("src/main/resources/assets/lithium/")
    outputDirectoryForSummaryDocument = file(".")
    mixinParentPackage = "me.jellysquid.mods.lithium"
    modShortName = "Lithium"
}

jar.dependsOn createMixinConfig
processResources.dependsOn createMixinConfig
createMixinConfig.dependsOn compileJava

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}